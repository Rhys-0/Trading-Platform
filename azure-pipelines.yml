trigger:
- main
- pipeline-dev
- stock-news
- database-dev

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  dotnetVersion: '9.0.200'
  projectPath: 'TradingApp/TradingApp.csproj'
  testProjects: 'TradingApp.Tests/TradingApp.Tests.csproj' 
  publishDir: '$(Build.ArtifactStagingDirectory)/publish'
  runSettingsFile: '$(Build.SourcesDirectory)/coverlet.runsettings'

steps:
- checkout: self
  fetchDepth: 0
  persistCredentials: true

- script: docker pull postgres:15-alpine
  displayName: 'Download Postgres Image'

- task: UseDotNet@2
  displayName: 'Install .NET SDK'
  inputs:
    packageType: 'sdk'
    version: '$(dotnetVersion)'

- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet packages'
  inputs:
    command: 'restore'
    projects: '**/*.sln'

# Prepare SonarCloud analysis
- task: SonarCloudPrepare@3
  displayName: 'Prepare SonarCloud analysis'
  inputs:
    SonarCloud: 'SonarQube-Connection'
    organization: 'rhys-0'
    scannerMode: 'dotnet'
    projectKey: 'Rhys-0_Trading-Platform'
    extraProperties: |
      sonar.test.inclusions=**/TradingApp.Tests/**/*.cs
      sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/**/coverage.opencover.xml
      sonar.coverage.exclusions=**/Program.cs,**/*.razor,**/wwwroot/**

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '**/*.sln'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Run Tests with Coverage'
  inputs:
    command: 'test'
    projects: '$(testProjects)'
    arguments: >
      --configuration $(buildConfiguration)
      --no-build
      --settings $(runSettingsFile)

- task: PublishCodeCoverageResults@2
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: 'OpenCover'
    summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.opencover.xml'
    reportDirectory: '$(Agent.TempDirectory)'

- task: SonarCloudAnalyze@3
  displayName: 'Run SonarCloud analysis'
