@namespace TradingApp.Components
@using TradingApp.Models

<div class="toast-container position-fixed top-0 end-0 p-3">
    @if (_notifications.Any())
    {
        @foreach (var notification in _notifications)
        {
            <div class="toast show align-items-center text-white @GetToastClass(notification.Type) border-0" role="alert">
                <div class="d-flex">
                    <div class="toast-body">
                        <div class="d-flex align-items-center">
                            <i class="bi @GetIconClass(notification.Type) me-2"></i>
                            <div>
                                <strong>@notification.Title</strong>
                                <div>@notification.Message</div>
                            </div>
                        </div>
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" 
                            @onclick="() => RemoveNotification(notification)"></button>
                </div>
            </div>
        }
    }
</div>

@code {
    private List<Notification> _notifications = new();

    public void ShowTradeConfirmation(TradingModal.TradeConfirmation trade)
    {
        var notification = new Notification
        {
            Type = NotificationType.Success,
            Title = $"{trade.TradeType} Order Executed",
            Message = $"{trade.Shares:F4} shares of {trade.Stock.Symbol} at ${trade.PricePerShare:F2}"
        };

        AddNotification(notification);
    }

    public void ShowError(string message)
    {
        var notification = new Notification
        {
            Type = NotificationType.Error,
            Title = "Trade Failed",
            Message = message
        };

        AddNotification(notification);
    }

    public void ShowWarning(string message)
    {
        var notification = new Notification
        {
            Type = NotificationType.Warning,
            Title = "Warning",
            Message = message
        };

        AddNotification(notification);
    }

    private void AddNotification(Notification notification)
    {
        _notifications.Add(notification);
        StateHasChanged();

        // Auto remove after 5 seconds
        _ = Task.Run(async () =>
        {
            await Task.Delay(5000);
            RemoveNotification(notification);
        });
    }

    private void RemoveNotification(Notification notification)
    {
        _notifications.Remove(notification);
        InvokeAsync(StateHasChanged);
    }

    private string GetToastClass(NotificationType type) => type switch
    {
        NotificationType.Success => "bg-success",
        NotificationType.Error => "bg-danger",
        NotificationType.Warning => "bg-warning",
        _ => "bg-info"
    };

    private string GetIconClass(NotificationType type) => type switch
    {
        NotificationType.Success => "bi-check-circle-fill",
        NotificationType.Error => "bi-exclamation-triangle-fill",
        NotificationType.Warning => "bi-exclamation-circle-fill",
        _ => "bi-info-circle-fill"
    };

    public enum NotificationType
    {
        Success,
        Error,
        Warning,
        Info
    }

    public class Notification
    {
        public NotificationType Type { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
    }
}