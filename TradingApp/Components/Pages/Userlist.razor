@page "/admin"
@rendermode InteractiveServer
@using TradingApp.Data
@using TradingApp.Models
@inject UserManager UserManager
@inject NavigationManager Navigation

<h2 class="mb-4">User List</h2>

@if (Users == null)
{
    <p><em>Loading users...</em></p>
}
else if (!Users.Any())
{
    <p>No users found.</p>
}
else
{
    <table class="table table-striped table-bordered align-middle">
        <thead class="table-dark">
            <tr>
                <th>User ID</th>
                <th>Username</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Username</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => ViewPortfolio(user.Id)">
                            View Portfolio
                        </button>
                        <button class="btn btn-sm btn-primary" @onclick="() => HandleCashAction(user)">
                            Set Balance
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (ShowCashModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Set Cash Balance for @SelectedUser?.Username</h5>
                    <button type="button" class="btn-close" @onclick="() => HandleCashAction()"></button>
                </div>
                <div class="modal-body">
                    <input type="number" class="form-control" @bind="NewCashBalance" step="0.01" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => HandleCashAction()">Cancel</button>
                    <button class="btn btn-success" @onclick="() => HandleCashAction(save: true)">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<User>? Users;
    private User? SelectedUser;
    private bool ShowCashModal = false;
    private decimal NewCashBalance;

    protected override async Task OnInitializedAsync()
    {
        Users = await UserManager.GetAllUsers();
    }

    private void ViewPortfolio(long userId)
    {
        Navigation.NavigateTo($"/portfolio/{userId}");
    }

    private async Task HandleCashAction(User? user = null, bool save = false)
    {
        if (user != null)
        {
            SelectedUser = user;
            NewCashBalance = user.CurrentCashBalance;
            ShowCashModal = true;
            return;
        }

        if (save && SelectedUser != null)
        {
            SelectedUser.CurrentCashBalance = NewCashBalance;
            await UserManager.UpdateUser(SelectedUser);
            Users = await UserManager.GetAllUsers();
        }

        ShowCashModal = false;
        SelectedUser = null;
        NewCashBalance = 0;
        StateHasChanged();
    }
}
