@page "/personal-info"
@layout Layout.EmptyLayout

<PageTitle>Personal Information - TradingApp</PageTitle>

<div class="personal-info-container">
    <!-- Header Section -->
    <div class="header-section">
        <div class="header-content">
            <div class="header-icon">
                <i class="bi bi-person-circle"></i>
            </div>
            <h1>Personal Information</h1>
            <p>Let's get to know you better</p>
            <div class="progress-bar">
                <div class="progress-fill" style="width: 33%"></div>
            </div>
        </div>
    </div>

    <!-- Security Banner -->
    <div class="security-banner">
        <i class="bi bi-shield-check"></i>
        <span>Your information is encrypted and secure</span>
    </div>

    <!-- Form Section -->
    <div class="form-section">
        <EditForm Model="_model" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            
            <div class="form-row">
                <div class="form-group">
                    <label for="firstName">First Name</label>
                    <InputText id="firstName" class="form-control" placeholder="Enter your first name" @bind-Value="_model.FirstName" />
                    <ValidationMessage For="@(() => _model.FirstName)" />
                </div>
                <div class="form-group">
                    <label for="lastName">Last Name</label>
                    <InputText id="lastName" class="form-control" placeholder="Enter your last name" @bind-Value="_model.LastName" />
                    <ValidationMessage For="@(() => _model.LastName)" />
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="dateOfBirth">Date of Birth</label>
                    <div class="date-input-wrapper">
                        <InputText id="dateOfBirth" class="form-control" placeholder="dd/mm/yyyy" @bind-Value="_model.DateOfBirth" />
                        <i class="bi bi-calendar date-icon"></i>
                    </div>
                    <ValidationMessage For="@(() => _model.DateOfBirth)" />
                </div>
                <div class="form-group">
                    <label for="nationality">Nationality</label>
                    <InputSelect id="nationality" class="form-control" @bind-Value="_model.Nationality">
                        <option value="">Select your nationality</option>
                        <option value="US">United States</option>
                        <option value="CA">Canada</option>
                        <option value="GB">United Kingdom</option>
                        <option value="AU">Australia</option>
                        <option value="DE">Germany</option>
                        <option value="FR">France</option>
                        <option value="JP">Japan</option>
                        <option value="IN">India</option>
                        <option value="CN">China</option>
                        <option value="BR">Brazil</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => _model.Nationality)" />
                </div>
            </div>

            <div class="form-group full-width">
                <label for="streetAddress">Street Address</label>
                <InputText id="streetAddress" class="form-control" placeholder="Enter your full address" @bind-Value="_model.StreetAddress" />
                <ValidationMessage For="@(() => _model.StreetAddress)" />
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="city">City</label>
                    <InputText id="city" class="form-control" placeholder="City" @bind-Value="_model.City" />
                    <ValidationMessage For="@(() => _model.City)" />
                </div>
                <div class="form-group">
                    <label for="state">State/Province</label>
                    <InputText id="state" class="form-control" placeholder="State" @bind-Value="_model.State" />
                    <ValidationMessage For="@(() => _model.State)" />
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="zipCode">ZIP/Postal Code</label>
                    <InputText id="zipCode" class="form-control" placeholder="ZIP Code" @bind-Value="_model.ZipCode" />
                    <ValidationMessage For="@(() => _model.ZipCode)" />
                </div>
                <div class="form-group">
                    <label for="occupation">Occupation</label>
                    <InputText id="occupation" class="form-control" placeholder="Your occupation" @bind-Value="_model.Occupation" />
                    <ValidationMessage For="@(() => _model.Occupation)" />
                </div>
            </div>

            <div class="form-group">
                <label for="annualIncome">Annual Income</label>
                <InputSelect id="annualIncome" class="form-control" @bind-Value="_model.AnnualIncome">
                    <option value="">Select income range</option>
                    <option value="0-25000">$0 - $25,000</option>
                    <option value="25001-50000">$25,001 - $50,000</option>
                    <option value="50001-75000">$50,001 - $75,000</option>
                    <option value="75001-100000">$75,001 - $100,000</option>
                    <option value="100001-150000">$100,001 - $150,000</option>
                    <option value="150001-200000">$150,001 - $200,000</option>
                    <option value="200001+">$200,001+</option>
                </InputSelect>
                <ValidationMessage For="@(() => _model.AnnualIncome)" />
            </div>

            @if (!string.IsNullOrEmpty(_errorMessage)) {
                <div class="alert alert-danger" role="alert">@_errorMessage</div>
            }

            <button class="btn btn-primary continue-btn" type="submit" disabled="@_isSubmitting">
                Continue to Verification
                <i class="bi bi-arrow-right"></i>
            </button>
        </EditForm>
    </div>
</div>

<style>
.personal-info-container {
    min-height: 100vh;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: #f8fafc;
}

.header-section {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 3rem 2rem;
    text-align: center;
}

.header-content {
    max-width: 800px;
    margin: 0 auto;
}

.header-icon {
    font-size: 4rem;
    margin-bottom: 1rem;
}

.header-content h1 {
    font-size: 3rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
}

.header-content p {
    font-size: 1.2rem;
    opacity: 0.9;
    margin-bottom: 2rem;
}

.progress-bar {
    width: 100%;
    height: 8px;
    background: rgba(255, 255, 255, 0.3);
    border-radius: 4px;
    overflow: hidden;
}

.progress-fill {
    height: 100%;
    background: #4ade80;
    border-radius: 4px;
    transition: width 0.3s ease;
}

.security-banner {
    background: #dcfce7;
    color: #166534;
    padding: 1rem 2rem;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-weight: 500;
}

.security-banner i {
    font-size: 1.2rem;
}

.form-section {
    max-width: 800px;
    margin: 0 auto;
    padding: 3rem 2rem;
}

.form-row {
    display: flex;
    gap: 2rem;
    margin-bottom: 1.5rem;
}

.form-row .form-group {
    flex: 1;
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-group.full-width {
    width: 100%;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: #2d3748;
    font-weight: 600;
    font-size: 0.95rem;
}

.form-control {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 1px solid #e2e8f0;
    border-radius: 0.5rem;
    font-size: 1rem;
    transition: all 0.2s;
    background: white;
}

.form-control:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.date-input-wrapper {
    position: relative;
}

.date-icon {
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: #718096;
    pointer-events: none;
}

.continue-btn {
    width: 100%;
    padding: 1rem 2rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    border-radius: 0.5rem;
    color: white;
    font-size: 1.1rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    transition: transform 0.2s, box-shadow 0.2s;
    margin-top: 2rem;
}

.continue-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
}

.continue-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
}

.alert {
    padding: 1rem;
    border-radius: 0.5rem;
    margin-bottom: 1.5rem;
}

.alert-danger {
    background: #fef2f2;
    color: #dc2626;
    border: 1px solid #fecaca;
}

@@media (max-width: 768px) {
    .header-content h1 {
        font-size: 2rem;
    }
    
    .header-content p {
        font-size: 1rem;
    }
    
    .form-row {
        flex-direction: column;
        gap: 0;
    }
    
    .form-section {
        padding: 2rem 1rem;
    }
    
    .header-section {
        padding: 2rem 1rem;
    }
}
</style>

@code {
    private PersonalInfoModel _model = new();
    private bool _isSubmitting = false;
    private string? _errorMessage;

    [Inject] private NavigationManager Nav { get; set; } = default!;

    private async Task HandleValidSubmit() {
        _errorMessage = null;
        _isSubmitting = true;
        
        try {
            // Here you would typically save the personal information
            // For now, we'll just navigate to the next step
            await Task.Delay(500); // Simulate processing
            Nav.NavigateTo("/identity-verification");
        } catch (Exception) {
            _errorMessage = "An error occurred. Please try again.";
        } finally {
            _isSubmitting = false;
        }
    }

    private sealed class PersonalInfoModel {
        [Required]
        public string FirstName { get; set; } = string.Empty;

        [Required]
        public string LastName { get; set; } = string.Empty;

        [Required]
        public string DateOfBirth { get; set; } = string.Empty;

        [Required]
        public string Nationality { get; set; } = string.Empty;

        [Required]
        public string StreetAddress { get; set; } = string.Empty;

        [Required]
        public string City { get; set; } = string.Empty;

        [Required]
        public string State { get; set; } = string.Empty;

        [Required]
        public string ZipCode { get; set; } = string.Empty;

        [Required]
        public string Occupation { get; set; } = string.Empty;

        [Required]
        public string AnnualIncome { get; set; } = string.Empty;
    }
}
