@page "/portfolio"
@page "/portfolio/{UserId:long?}"
@rendermode InteractiveServer
@using TradingApp.Data
@using TradingApp.Data.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using TradingApp.Models
@using TradingApp.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject UserService UserService
@inject PortfolioService PortfolioService
@inject UserManager UserManager
@implements IDisposable

<PageTitle>Dashboard</PageTitle>

<div class="container-fluid">
    <div class="row g-4 mt-3">
        <div class="col-lg-3 col-md-6">
            <div class="card shadow-sm rounded-3 p-3">
                <h2 class="h5 text-muted mb-2">Portfolio Value</h2>
                <p class="fs-2 fw-bold text-primary mb-0">@TotalValue.ToString("C")</p>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="card shadow-sm rounded-3 p-3">
                <h2 class="h5 text-muted mb-2">Change (24hrs)</h2>
                <p class="fs-2 fw-bold @(FlatChange >= 0 ? "text-success" : "text-danger") mb-0">
                    @(FlatChange >= 0 ? "+" : "")@FlatChange.ToString("C")
                    <span class="fs-6 fw-normal">(@(PercentageChange >= 0 ? "+" : "")@PercentageChange.ToString("P"))</span>
                </p>
            </div>
        </div>
    </div>

    <hr class="my-5" />

    <!-- FOR TESTING -->
    <div class="mb-4">
        <button class="btn btn-sm btn-primary me-2" @onclick="CreateTestUser">Create Test Account</button>
        <button class="btn btn-sm btn-success" @onclick="BuyTestStock">Buy Test Stock</button>
    </div>

    <div class="row g-4">
        <div class="col-12">
            <div class="card shadow-sm rounded-3 p-4">
                <h2 class="h4 text-muted mb-4">Holdings Breakdown</h2>
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Ticker</th>
                                <th>Quantity</th>
                                <th>Avg. Price</th>
                                <th>Current Price</th>
                                <th>Daily Change</th>
                                <th>Portfolio Weight</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Holdings.Any())
                            {
                                @foreach (var holding in Holdings)
                                {
                                    <tr>
                                        <td>@holding.Name</td>
                                        <td>@holding.Ticker</td>
                                        <td>@holding.Quantity</td>
                                        <td>@holding.AveragePrice.ToString("C")</td>
                                        <td>@holding.CurrentPrice.ToString("C")</td>
                                        <td class="@(holding.DailyChange >= 0 ? "text-success" : "text-danger")">
                                            @(holding.DailyChange >= 0 ? "+" : "")@holding.DailyChange.ToString("P")
                                        </td>
                                        <td>@((holding.PortfolioWeight * 100).ToString("N2"))%</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="7" class="text-center text-muted">No holdings yet. Start trading to see your portfolio!</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public class Holding
    {
        public string Ticker { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public int Quantity { get; set; }
        public decimal AveragePrice { get; set; }
        public decimal CurrentPrice { get; set; }
        public decimal DailyChange { get; set; }
        public decimal PortfolioWeight { get; set; }
    }

    private List<Holding> Holdings = new();
    
    // ✅ Changed from computed properties to fields
    private decimal FlatChange = 0;
    private decimal TotalValue = 0;
    private decimal PercentageChange = 0;
    
    private TradingApp.Models.User? testUser;

    [Parameter]
    public long? UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to portfolio change events
        PortfolioService.OnPortfolioChanged += HandlePortfolioChanged;

        if (UserId.HasValue)
        {
            var user = await UserManager.GetUserById(UserId.Value);
            if (user != null)
            {
                await UserManager.LoadUserPortfolio(user);
                PortfolioService.UpdateUserPortfolio(user);
                await LoadHoldingsAsync(user);
            }
        }
        else
        {
            await LoadHoldingsAsync();
        }
    }

    /// <summary>
    /// Event handler called when a trade is executed elsewhere in the application
    /// </summary>
    private async void HandlePortfolioChanged()
    {
        await InvokeAsync(async () =>
        {
            Console.WriteLine("📊 Portfolio changed - refreshing dashboard...");
            await LoadHoldingsAsync();
            StateHasChanged();
        });
    }

    /// <summary>
    /// Clean up event subscription when component is disposed
    /// </summary>
    public void Dispose()
    {
        PortfolioService.OnPortfolioChanged -= HandlePortfolioChanged;
    }

    private async Task LoadHoldingsAsync(User? overrideUser = null)
    {
        User? user;

        if (overrideUser != null)
        {
            user = overrideUser;
        }
        else
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userIdentity = authState.User;

            if (!userIdentity.Identity?.IsAuthenticated ?? true)
            {
                Holdings.Clear();
                TotalValue = 0;
                FlatChange = 0;
                PercentageChange = 0;
                StateHasChanged();
                return;
            }

            user = await UserService.GetCurrentUserAsync(userIdentity);
            if (user?.Portfolio?.Positions == null)
            {
                Holdings.Clear();
                TotalValue = 0;
                FlatChange = 0;
                PercentageChange = 0;
                StateHasChanged();
                return;
            }

            PortfolioService.UpdateUserPortfolio(user);
        }

        if (user?.Portfolio?.Positions == null)
        {
            Holdings.Clear();
            TotalValue = 0;
            FlatChange = 0;
            PercentageChange = 0;
            StateHasChanged();
            return;
        }

        // ✅ USE PORTFOLIO VALUES FROM DATABASE (calculated by PortfolioService)
        TotalValue = user.Portfolio.Value;
        FlatChange = user.Portfolio.NetProfit;
        PercentageChange = user.Portfolio.PercentageReturn;

        Console.WriteLine($"📊 Dashboard loaded - Portfolio Value: ${TotalValue:N2}, Net Profit: ${FlatChange:N2}, Return: {PercentageChange:P2}");

        // Build holdings list
        Holdings = user.Portfolio.Positions.Values.Select(p =>
        {
            decimal avgPrice = p.PurchaseLots?.Any() == true
                ? p.PurchaseLots.Average(lot => lot.PurchasePrice)
                : 0;

            return new Holding
            {
                Ticker = p.StockSymbol,
                Name = p.StockSymbol, // Fallback to symbol since Stocks is internal
                Quantity = p.TotalQuantity,
                AveragePrice = avgPrice,
                CurrentPrice = avgPrice, // ✅ Use average price as fallback (actual current price will be shown in TotalValue)
                DailyChange = 0, // ✅ This would need real-time price data to calculate accurately
                PortfolioWeight = 0 // Will be calculated below
            };
        })
        .ToList();

        // ✅ Calculate portfolio weight based on average cost (approximation)
        var totalCost = Holdings.Sum(h => h.AveragePrice * h.Quantity);
        foreach (var h in Holdings)
        {
            h.PortfolioWeight = totalCost != 0 ? (h.AveragePrice * h.Quantity) / totalCost : 0;
        }

        StateHasChanged();
    }

    private async Task CreateTestUser()
    {
        testUser = new User(
            id: 67,
            username: "TestUser",
            email: "test@email.com",
            firstName: "Test",
            lastName: "Name",
            startingCashBalance: 10_000m,
            currentCashBalance: 10_000m
        );

        testUser.Portfolio = new Portfolio(testUser.Id, 0m, 0m, 0m);

        await LoadHoldingsAsync(testUser);
    }

    private async Task BuyTestStock()
    {
        if (testUser?.Portfolio == null) return;

        testUser.Portfolio.AddStocks("AAPL", 1, 150m);

        await LoadHoldingsAsync(testUser);
    }
}