@page "/login"
@rendermode InteractiveServer
@layout EmptyLayout

<PageTitle>Login - TradingApp</PageTitle>

<div class="login-container">
    <div class="form-container">
        <div class="form-header">
            <h2>Welcome Back</h2>
            <p>Sign in to your account</p>
        </div>

        @if (!string.IsNullOrEmpty(_errorMessage)) {
            <div class="alert alert-danger">
                <span>@_errorMessage</span>
                <button type="button" @onclick="ClearError">√ó</button>
            </div>
        }

        <EditForm Model="_model" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" FormName="LoginForm">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <label for="email">Email or Username</label>
                <InputText id="email" class="form-control" @bind-Value="_model.Email" />
                <ValidationMessage For="@(() => _model.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="_model.Password" />
                <ValidationMessage For="@(() => _model.Password)" />
            </div>

            <button class="btn btn-primary" type="submit" disabled="@_isSubmitting">
                @if (_isSubmitting) {
                    <span>Signing In...</span>
                } else {
                    <span>Sign In</span>
                }
            </button>
            
            <div style="margin-top: 10px;">
                <button type="button" class="btn btn-secondary" @onclick="DebugForm">
                    Debug Form (Check Console)
                </button>
            </div>
        </EditForm>

        <div class="login-link">
            <span>Don't have an account?</span>
            <a href="/register">Create account here</a>
        </div>
    </div>
</div>

<style>
    .login-container {
        display: flex;
        min-height: 100vh;
        justify-content: center;
        align-items: center;
        background-color: #f0f2f5;
        font-family: 'Segoe UI', Roboto, sans-serif;
    }

    .form-container {
        width: 100%;
        max-width: 400px;
        padding: 2rem;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .form-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    .form-header h2 {
        color: #333;
        margin-bottom: 0.5rem;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 600;
        color: #333;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
    }

    .btn {
        width: 100%;
        padding: 0.75rem;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
        margin-bottom: 0.5rem;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }

    .alert {
        padding: 0.75rem;
        margin-bottom: 1rem;
        border-radius: 4px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .login-link {
        text-align: center;
        margin-top: 1rem;
        color: #666;
    }

    .login-link a {
        color: #007bff;
        text-decoration: none;
    }
</style>

@code {
    private LoginModel _model = new();
    private bool _isSubmitting = false;
    private string? _errorMessage;

    [Inject] private IAuthenticationService AuthService { get; set; } = default!;
    [Inject] private NavigationManager Nav { get; set; } = default!;

    private void ClearError() {
        _errorMessage = null;
    }

    private void HandleInvalidSubmit() {
        Console.WriteLine($"üîç LOGIN DEBUG: HandleInvalidSubmit called - form validation failed!");
        Console.WriteLine($"üîç LOGIN DEBUG: Email: '{_model.Email}', Password: '{_model.Password}'");
        Console.WriteLine($"üîç LOGIN DEBUG: Email length: {_model.Email?.Length ?? 0}, Password length: {_model.Password?.Length ?? 0}");
        _errorMessage = "Please fill in all required fields.";
    }

    private void DebugForm() {
        Console.WriteLine($"üîç LOGIN DEBUG: DebugForm clicked");
        Console.WriteLine($"üîç LOGIN DEBUG: Email: '{_model.Email}'");
        Console.WriteLine($"üîç LOGIN DEBUG: Password: '{_model.Password}'");
        Console.WriteLine($"üîç LOGIN DEBUG: Email length: {_model.Email?.Length ?? 0}");
        Console.WriteLine($"üîç LOGIN DEBUG: Password length: {_model.Password?.Length ?? 0}");
        Console.WriteLine($"üîç LOGIN DEBUG: Is submitting: {_isSubmitting}");
        Console.WriteLine($"üîç LOGIN DEBUG: Error message: '{_errorMessage}'");
    }

    private async Task HandleValidSubmit() {
        Console.WriteLine($"üîç LOGIN DEBUG: HandleValidSubmit called");
        Console.WriteLine($"üîç LOGIN DEBUG: Email: '{_model.Email}', Password: '{_model.Password}'");
        
        _errorMessage = null;
        _isSubmitting = true;
        
        try {
            Console.WriteLine($"üîç LOGIN DEBUG: Calling AuthService.LoginAsync");
            bool success = await AuthService.LoginAsync(_model.Email, _model.Password);
            Console.WriteLine($"üîç LOGIN DEBUG: Login result: {success}");
            
            if (!success) {
                Console.WriteLine($"üîç LOGIN DEBUG: Login failed - showing error message");
                _errorMessage = "Invalid credentials. Please try again.";
                return;
            }
            
            Console.WriteLine($"üîç LOGIN DEBUG: Login successful - redirecting to dashboard");
            Nav.NavigateTo("/dashboard");
        } catch (Exception ex) {
            Console.WriteLine($"üîç LOGIN DEBUG: Exception occurred: {ex.Message}");
            _errorMessage = "An unexpected error occurred. Please try again.";
        } finally {
            _isSubmitting = false;
            Console.WriteLine($"üîç LOGIN DEBUG: Login process completed");
        }
    }

    public class LoginModel {
        [Required]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;
    }
}
