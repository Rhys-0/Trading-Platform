@page "/login"
@layout Layout.EmptyLayout

<PageTitle>Login - TradingApp</PageTitle>

<div class="login-container">
    <div class="branding-section">
        <div class="branding-content">
            <div class="logo-container">
                <i class="bi bi-graph-up-arrow"></i>
            </div>
            <h1>Welcome Back</h1>
            <p>Sign in to your TradePro account</p>
        </div>
    </div>

    <div class="form-section">
        <div class="form-container">
            <h2>Sign In</h2>
            
            @if (!string.IsNullOrEmpty(_errorMessage)) {
                <div class="error-banner">
                    <i class="bi bi-exclamation-triangle"></i>
                    <div class="error-content">
                        <h4>Login Failed</h4>
                        <p>@_errorMessage</p>
                    </div>
                    <button class="close-btn" @onclick="ClearError">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
            }

            <EditForm Model="_model" OnValidSubmit="HandleValidSubmit" FormName="LoginForm">
                <DataAnnotationsValidator />
                
                <div class="form-group">
                    <label for="email">Email or Username</label>
                    <InputText id="email" class="form-control" placeholder="Enter your email or username" @bind-Value="_model.Email" />
                    <ValidationMessage For="@(() => _model.Email)" />
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText id="password" type="password" class="form-control" placeholder="Enter your password" @bind-Value="_model.Password" />
                    <ValidationMessage For="@(() => _model.Password)" />
                </div>

                <button class="btn btn-primary login-btn" type="submit" disabled="@_isSubmitting">
                    @if (_isSubmitting) {
                        <span>Signing In...</span>
                    } else {
                        <span>Sign In</span>
                    }
                </button>
            </EditForm>

            <div class="create-account">
                <p>Don't have an account? <a href="/register">+ Create Account</a></p>
            </div>
        </div>
    </div>
</div>

<style>
.login-container {
    display: flex;
    min-height: 100vh;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.branding-section {
    flex: 1;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
}

.branding-content {
    text-align: center;
}

.logo-container {
    margin-bottom: 2rem;
}

.logo-container i {
    font-size: 4rem;
    color: rgba(255, 255, 255, 0.9);
}

.branding-content h1 {
    font-size: 3rem;
    font-weight: 700;
    margin-bottom: 1rem;
}

.branding-content p {
    font-size: 1.2rem;
    opacity: 0.9;
}

.form-section {
    flex: 1;
    background: white;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
}

.form-container {
    width: 100%;
    max-width: 400px;
}

.form-container h2 {
    font-size: 2rem;
    font-weight: 700;
    color: #1a202c;
    margin-bottom: 2rem;
    text-align: center;
}

.error-banner {
    background: #fef2f2;
    border: 1px solid #fecaca;
    border-radius: 0.75rem;
    padding: 1rem;
    margin-bottom: 1.5rem;
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
}

.error-banner i {
    color: #dc2626;
    font-size: 1.2rem;
}

.error-content h4 {
    color: #dc2626;
    font-size: 1rem;
    font-weight: 600;
    margin: 0 0 0.25rem 0;
}

.error-content p {
    color: #dc2626;
    font-size: 0.9rem;
    margin: 0;
}

.close-btn {
    background: none;
    border: none;
    color: #dc2626;
    cursor: pointer;
    padding: 0.25rem;
    margin-left: auto;
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: #374151;
    font-weight: 600;
}

.form-control {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 1px solid #d1d5db;
    border-radius: 0.5rem;
    font-size: 1rem;
}

.form-control:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.login-btn {
    width: 100%;
    padding: 0.875rem 1.5rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    border-radius: 0.5rem;
    color: white;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    margin-bottom: 1.5rem;
}

.login-btn:hover:not(:disabled) {
    opacity: 0.9;
}

.login-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
}

.create-account {
    text-align: center;
    font-size: 0.9rem;
    color: #374151;
}

.create-account a {
    color: #667eea;
    text-decoration: none;
    font-weight: 600;
}

.create-account a:hover {
    text-decoration: underline;
}

@@media (max-width: 768px) {
    .login-container {
        flex-direction: column;
    }
    
    .branding-section {
        padding: 2rem 1rem;
    }
    
    .branding-content h1 {
        font-size: 2rem;
    }
    
    .form-section {
        padding: 1.5rem 1rem;
    }
}
</style>

@code {
    private LoginModel _model = new();
    private bool _isSubmitting = false;
    private string? _errorMessage;

    [Inject] private TradingApp.Data.Interfaces.IAuthenticationService AuthService { get; set; } = default!;
    [Inject] private NavigationManager Nav { get; set; } = default!;

    private void ClearError() {
        _errorMessage = null;
    }

    private async Task HandleValidSubmit() {
        _errorMessage = null;
        _isSubmitting = true;
        
        try {
            bool success = await AuthService.LoginAsync(_model.Email, _model.Password);
            
            if (!success) {
                _errorMessage = "The email/username or password you entered is incorrect. Please verify your credentials and try again.";
                return;
            }
            
            // Login successful - navigate to dashboard
            Nav.NavigateTo("/dashboard");
        } catch (Exception ex) {
            _errorMessage = "An unexpected error occurred. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
        } finally {
            _isSubmitting = false;
        }
    }

    private sealed class LoginModel {
        [Required]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;
    }
}
