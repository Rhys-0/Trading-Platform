@page "/test-register"
@rendermode InteractiveServer
@layout EmptyLayout
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Test Registration - TradingApp</PageTitle>

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white text-center">
                    <h3>Test Registration Page</h3>
                    <p class="mb-0">Quick registration for testing purposes</p>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }
                    
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success" role="alert">
                            @successMessage
                        </div>
                    }

                    <EditForm Model="testUser" OnValidSubmit="HandleTestRegistration">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username" class="form-control" @bind-Value="testUser.Username" placeholder="Enter username" />
                            <ValidationMessage For="@(() => testUser.Username)" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="testUser.Email" placeholder="Enter email" />
                            <ValidationMessage For="@(() => testUser.Email)" />
                        </div>

                        <div class="mb-3">
                            <label for="firstName" class="form-label">First Name</label>
                            <InputText id="firstName" class="form-control" @bind-Value="testUser.FirstName" placeholder="Enter first name" />
                            <ValidationMessage For="@(() => testUser.FirstName)" />
                        </div>

                        <div class="mb-3">
                            <label for="lastName" class="form-label">Last Name</label>
                            <InputText id="lastName" class="form-control" @bind-Value="testUser.LastName" placeholder="Enter last name" />
                            <ValidationMessage For="@(() => testUser.LastName)" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="testUser.Password" placeholder="Enter password" />
                            <ValidationMessage For="@(() => testUser.Password)" />
                        </div>

                        <div class="mb-3 form-check">
                            <InputCheckbox id="terms" class="form-check-input" @bind-Value="testUser.AcceptTerms" />
                            <label class="form-check-label" for="terms">
                                I accept the terms and conditions
                            </label>
                            <ValidationMessage For="@(() => testUser.AcceptTerms)" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary btn-lg" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Creating Account...</span>
                                }
                                else
                                {
                                    <span>Create Test Account</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    <hr class="my-4">
                    
                    <div class="text-center">
                        <p class="text-muted">Quick test accounts:</p>
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="() => FillTestData('user1')">Test User 1</button>
                            <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="() => FillTestData('user2')">Test User 2</button>
                            <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="() => FillTestData('demo')">Demo User</button>
                        </div>
                    </div>

                    <div class="text-center mt-3">
                        <a href="/login" class="text-decoration-none">
                            <i class="bi bi-arrow-left"></i> Back to Login
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private TestUserModel testUser = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;

    public class TestUserModel
    {
        [Required(ErrorMessage = "Username is required")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 50 characters")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "First name is required")]
        [StringLength(50, MinimumLength = 2, ErrorMessage = "First name must be between 2 and 50 characters")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        [StringLength(50, MinimumLength = 2, ErrorMessage = "Last name must be between 2 and 50 characters")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;

        [Range(typeof(bool), "true", "true", ErrorMessage = "You must accept the terms and conditions")]
        public bool AcceptTerms { get; set; } = false;
    }

    private async Task HandleTestRegistration()
    {
        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            Console.WriteLine($"TEST REGISTRATION: Starting registration for {testUser.FirstName} {testUser.LastName} ({testUser.Username}) - {testUser.Email}");

            bool success = await AuthService.RegisterAsync(
                testUser.Username,
                testUser.Email,
                testUser.Password,
                testUser.FirstName,
                testUser.LastName
            );

            if (success)
            {
                successMessage = $"Test account created successfully! Welcome {testUser.FirstName}!";
                Console.WriteLine($"TEST REGISTRATION: Registration successful for {testUser.Username}");
                
                // Auto-navigate to dashboard after 2 seconds
                await Task.Delay(2000);
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = "Registration failed. Please try again.";
                Console.WriteLine($"TEST REGISTRATION: Registration failed for {testUser.Username}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"TEST REGISTRATION: Exception during registration: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FillTestData(string type)
    {
        switch (type)
        {
            case "user1":
                testUser.Username = "testuser1";
                testUser.Email = "testuser1@example.com";
                testUser.FirstName = "Test";
                testUser.LastName = "User";
                testUser.Password = "password123";
                testUser.AcceptTerms = true;
                break;
            case "user2":
                testUser.Username = "demo_user";
                testUser.Email = "demo@tradingapp.com";
                testUser.FirstName = "Demo";
                testUser.LastName = "Trader";
                testUser.Password = "demo123";
                testUser.AcceptTerms = true;
                break;
            case "demo":
                testUser.Username = "presentation_demo";
                testUser.Email = "demo@presentation.com";
                testUser.FirstName = "Presentation";
                testUser.LastName = "Demo";
                testUser.Password = "demo2024";
                testUser.AcceptTerms = true;
                break;
        }
    }
}