@namespace TradingApp.Components
@using TradingApp.Models
@implements IDisposable
@inject Stocks StockModel

<div class="stocks-grid">
  <aside class="stocks-list">
    <input class="stocks-search" @bind="search" placeholder="Search stock..." />

    <ul class="symbols">
      @foreach (var s in FilteredSymbols) {
        var q = Quotes.TryGetValue(s, out var qq) ? qq : null;
        <li>
          <div class="symbol-card @(s == Selected ? "active" : null)" @onclick="() => Select(s)">
            <div class="info">
              <div class="sym">@s</div>
              @if (q is not null) {
                <div class="row">
                  <span class="price">@q.Price.ToString("F2")</span>
                  <span class="chg @(q.IsUp ? "up" : "down")">
                    @(q.IsUp ? "+" : "-")@Math.Abs(q.Change).ToString("F2")
                    (@Math.Abs(q.ChangePercent).ToString("F2")%)
                  </span>
                </div>
              }
            </div>
            <div class="actions">
              <button type="button" class="text-btn buy"  @onclick:stopPropagation="true">Buy</button>
              <button type="button" class="text-btn sell" @onclick:stopPropagation="true">Sell</button>
            </div>
          </div>
        </li>
      }
    </ul>

    <div class="status" style="margin-top:.75rem">
      <div><small>Last update: @_lastUpdated</small></div>
      @if (!string.IsNullOrEmpty(_lastError)) {
        <div><small class="error">Error: @_lastError</small></div>
      }
    </div>
  </aside>

  <section class="stocks-view">
    <StockQuote Symbol="@EmbedSymbol" Width="420" ColorTheme="light" />
  </section>
</div>

@code {
    private string Selected = "TSLA";
    private string search = "";
    private string? _lastUpdated;
    private string? _lastError;

    private sealed class QuoteVm {
        public string Symbol { get; set; } = "";
        public decimal Price { get; set; }
        public decimal Change { get; set; }
        public decimal ChangePercent { get; set; }
        public bool IsUp { get; set; }
    }

    private readonly Dictionary<string, QuoteVm> Quotes = new();

    private IEnumerable<string> Symbols => StockModel.StockList.Keys.OrderBy(s => s);
    private IEnumerable<string> FilteredSymbols =>
        string.IsNullOrWhiteSpace(search) ? Symbols :
        Symbols.Where(s => s.Contains(search, StringComparison.OrdinalIgnoreCase));

    private string EmbedSymbol => $"NASDAQ:{Selected}";

    protected override void OnInitialized() {
        foreach (var kv in StockModel.StockList) {
            Quotes[kv.Key] = new QuoteVm {
                Symbol = kv.Key,
                Price = kv.Value.Price,
                Change = 0,
                ChangePercent = 0,
                IsUp = true
            };
        }
        // subscribe to live updates
        StockModel.PriceUpdated += OnPriceUpdated;
    }

    private void OnPriceUpdated(string symbol, decimal newPrice) {
        if (!Quotes.TryGetValue(symbol, out var q)) {
            q = new QuoteVm { Symbol = symbol };
            Quotes[symbol] = q;
        }

        var prev = q.Price;
        q.Price = newPrice;
        q.Change = Math.Round(q.Price - prev, 2);
        q.ChangePercent = prev == 0 ? 0 : Math.Round((q.Change / (prev == 0 ? 1 : prev)) * 100m, 2);
        q.IsUp = q.Change >= 0;

        _lastUpdated = DateTime.Now.ToLongTimeString();

        _ = InvokeAsync(StateHasChanged);
    }

    public void Dispose() {
        StockModel.PriceUpdated -= OnPriceUpdated;
    }

    private void Select(string s) => Selected = s;
}
