@namespace TradingApp.Components
@using TradingApp.Models
@inject Stocks StockModel
@inject TradingApp.Data.Interfaces.ITradeManager TradeManager
@inject TradingApp.Data.Interfaces.IAuthenticationService AuthService
@implements IDisposable

<div class="stocks-grid">
  <aside class="stocks-list">
    <input class="stocks-search" @bind="search" placeholder="Search stock..." />

    <ul class="symbols">
      @foreach (var s in VisibleSymbols)
      {
        var q = Quotes.TryGetValue(s, out var qq) ? qq : null;
        <li @key="s">
          <div class="symbol-card @(s == Selected ? "active" : "")" @onclick="() => Selected = s">
            <div class="info">
              <div class="sym">@s.Split(':').Last()</div>
              @if (q is not null)
              {
                <div class="row">
                  <span class="price">$@q.Price.ToString("F2")</span>
                  <span class="chg @(q.Change >= 0 ? "up" : "down")">
                    @q.Change.ToString("F2") (@q.ChangePercent.ToString("F2")%)
                  </span>
                </div>
              }
            </div>

            <div class="actions">
              <button class="trade-btn buy" @onclick="() => OpenBuyModal(s)" @onclick:stopPropagation="true">
                <svg class="btn-icon" viewBox="0 0 16 16" fill="currentColor" aria-hidden="true">
                  <path d="M8.5 2.75a.75.75 0 0 0-1.5 0v4.5h-4.5a.75.75 0 0 0 0 1.5h4.5v4.5a.75.75 0 0 0 1.5 0v-4.5h4.5a.75.75 0 0 0 0-1.5h-4.5v-4.5Z" />
                </svg>
                <span class="btn-text">Buy</span>
              </button>
              <button class="trade-btn sell" @onclick="() => OpenSellModal(s)" @onclick:stopPropagation="true">
                <svg class="btn-icon" viewBox="0 0 16 16" fill="currentColor" aria-hidden="true">
                  <path d="M2 8.75A.75.75 0 0 1 2.75 8h10.5a.75.75 0 0 1 0 1.5H2.75A.75.75 0 0 1 2 8.75Z" />
                </svg>
                <span class="btn-text">Sell</span>
              </button>
            </div>
          </div>
        </li>
      }
    </ul>

    <div class="status" style="margin-top:.75rem">
      <div><small>Source: Live API (server)</small></div>
      <div><small>Last update: @_lastUpdated</small></div>
      @if (!string.IsNullOrEmpty(_lastError))
      {
        <div><small class="error">Error: @_lastError</small></div>
      }
    </div>
  </aside>

  <section class="stocks-view">
    <StockQuote Symbol="@Selected" Width="1200" Height="600" ColorTheme="light" />
  </section>
</div>

<TradingModal @ref="_tradingModal" OnTradeExecuted="HandleTradeExecuted" />
<TradeNotification @ref="_notification" />

@code {
    private string Selected = "NASDAQ:TSLA";
    private string search = "";
    private string? _lastUpdated = "(none yet)";
    private string? _lastError;

    private sealed class QuoteDto {
        public string Symbol { get; set; } = "";
        public double Price { get; set; }
        public double Change { get; set; }
        public double ChangePercent { get; set; }
        public bool IsUp { get; set; }
    }

    private readonly Dictionary<string, QuoteDto> Quotes = new();

    private IEnumerable<string> AllSymbols =>
    StockModel.StockList.Keys.Select(MapToDisplayKey).Distinct();

    private IEnumerable<string> FilteredSymbols =>
        string.IsNullOrWhiteSpace(search)
            ? AllSymbols
            : AllSymbols.Where(s => s.Contains(search, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<string> VisibleSymbols =>
        FilteredSymbols.Where(sym => Quotes.TryGetValue(sym, out var q) && q.Price > 0);

    protected override void OnInitialized() {
        foreach (var kv in StockModel.StockList) {
            var key = MapToDisplayKey(kv.Key);
            Quotes[key] = new QuoteDto {
                Symbol = key,
                Price = (double)kv.Value.Price,
                Change = 0,
                ChangePercent = 0,
                IsUp = true
            };
        }

        StockModel.PriceUpdated += OnPriceUpdatedFromServer;
    }

    private static string MapToDisplayKey(string bareSymbol) => bareSymbol switch {
        // ETFs / NYSE names
        "SPY" or "KO" or "DIS" or "JPM" or "BAC" or "WMT" or "COST" or "PEP" or "NKE" or "IBM" or "ORCL" or "TSM"
            => $"NYSE:{bareSymbol}",

        // everything else default to NASDAQ
        _ => $"NASDAQ:{bareSymbol}"
    };

    private void OnPriceUpdatedFromServer(string bareSymbol, decimal newPrice) {
        var key = MapToDisplayKey(bareSymbol);

        if (!Quotes.TryGetValue(key, out var q)) {
            q = new QuoteDto { Symbol = key };
            Quotes[key] = q;
        }

        var prev = q.Price;
        q.Price = (double)newPrice;
        q.Change = Math.Round(q.Price - prev, 2);
        q.ChangePercent = prev == 0 ? 0 : Math.Round((q.Change / prev) * 100.0, 2);
        q.IsUp = q.Change >= 0;

        _lastUpdated = DateTime.Now.ToLongTimeString();

        // Ensure the selected item is one that is visible
        EnsureSelectedVisible();

        _ = InvokeAsync(StateHasChanged);
    }

    private void EnsureSelectedVisible() {
        if (!VisibleSymbols.Contains(Selected)) {
            var first = VisibleSymbols.FirstOrDefault();
            if (!string.IsNullOrEmpty(first))
                Selected = first;
        }
    }

    public void Dispose() {
        StockModel.PriceUpdated -= OnPriceUpdatedFromServer;
    }

    private TradingModal _tradingModal = null!;
    private TradeNotification _notification = null!;

    private void OpenBuyModal(string symbol) {
        if (Quotes.TryGetValue(symbol, out var quote)) {
            var stock = new Stock {
                Symbol = symbol.Split(':').Last(),
                Name   = symbol,
                Price  = (decimal)quote.Price,
                Change = (decimal)quote.Change,
                ChangePercent = (decimal)quote.ChangePercent
            };
            _tradingModal.OpenModal(stock, TradingModal.TradeType.Buy);
        }
    }

    private void OpenSellModal(string symbol) {
        if (Quotes.TryGetValue(symbol, out var quote)) {
            var stock = new Stock {
                Symbol = symbol.Split(':').Last(),
                Name   = symbol,
                Price  = (decimal)quote.Price,
                Change = (decimal)quote.Change,
                ChangePercent = (decimal)quote.ChangePercent
            };
            _tradingModal.OpenModal(stock, TradingModal.TradeType.Sell);
        }
    }

    private async Task HandleTradeExecuted(TradingModal.TradeConfirmation trade) {
        _notification.ShowTradeConfirmation(trade);
        // TODO: execute trade via service if desired

        // Trade (Transaction History) Part
        var user = AuthService.CurrentUser;
        if (user is null) return;

        var toSave = new TradingApp.Models.Trade {
            UserId = (long)user.Id,
            TradeType = trade.TradeType.ToString(),
            StockSymbol = trade.Stock.Symbol,
            Quantity = (int)Math.Round(trade.Shares),
            Price = trade.PricePerShare,
            Time = trade.Timestamp
        };
        await TradeManager.AddTradeAsync(toSave);
    }
} 
