@namespace TradingApp.Components
@using TradingApp.Models
@using TradingApp.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JS
@inject UserService UserService
@inject AuthenticationStateProvider AuthStateProvider

@if (_isVisible)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation="true">

            @if (_selectedStock != null)
            {
                <!-- Modal Header -->
                <div class="modal-header">
                    <div class="header-info">
                        <span class="trade-type-badge @(_tradeType.ToString().ToLower())">@_tradeType</span>
                        <h3 class="stock-symbol">@_selectedStock.Symbol</h3>
                        <p class="stock-name">@_selectedStock.Name</p>
                    </div>
                    <button class="close-button" @onclick="CloseModal" aria-label="Close modal">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                    </button>
                </div>

                <!-- Modal Body -->
                <div class="modal-body">
                    <div class="price-details">
                        <div class="detail-item">
                            <span class="label">Market Price</span>
                            <span class="value">$@_selectedStock.Price.ToString("N2")</span>
                        </div>
                        <div class="detail-item text-right">
                            <span class="label">24h Change</span>
                            <span class="value @(_selectedStock.Change >= 0 ? "up" : "down")">
                                @(_selectedStock.Change >= 0 ? "+" : "")@_selectedStock.Change.ToString("N2") (@_selectedStock.ChangePercent.ToString("N2")%)
                            </span>
                        </div>
                    </div>

                    @* Show warning if trying to sell with no shares *@
                    @if (_tradeType == TradeType.Sell && _ownedShares == 0)
                    {
                        <div class="alert alert-warning" style="margin: 1rem 0; padding: 0.75rem; background-color: #fff3cd; border: 1px solid #ffc107; border-radius: 4px;">
                            <strong>‚ö†Ô∏è No shares owned</strong>
                            <p style="margin: 0.5rem 0 0 0;">You don't own any shares of @_selectedStock.Symbol. Purchase shares first before selling.</p>
                        </div>
                    }

                    <div class="form-group">
                        <label for="quantity">Quantity (Shares)</label>
                        <div class="input-wrapper">
                            <span class="adornment">#</span>
                            <input id="quantity" type="number" class="form-control"
                                   @bind="_quantity" @oninput="CalculateTotalValue"
                                   placeholder="0" step="1" min="0" max="@_maxQuantity" 
                                   disabled="@(_tradeType == TradeType.Sell && _ownedShares == 0)" />
                        </div>
                        @if (_tradeType == TradeType.Sell && _ownedShares > 0)
                        {
                            <small class="text-muted">Maximum: @_ownedShares shares</small>
                        }
                    </div>

                    <div class="summary-row">
                        <div class="summary-item">
                            <span class="label">Total Value</span>
                            <span class="value">$@_totalValue.ToString("N2")</span>
                        </div>
                        <div class="summary-item">
                            <span class="label">@(_tradeType == TradeType.Buy ? "Available Cash" : "Owned Shares")</span>
                            <span class="value">@(_tradeType == TradeType.Buy ? $"${_availableBalance:N2}" : $"{_ownedShares}")</span>
                        </div>
                    </div>

                    @* Validation messages *@
                    @if (_quantity > 0)
                    {
                        @if (_tradeType == TradeType.Buy && _totalValue > _availableBalance)
                        {
                            <div class="alert alert-danger" style="margin: 1rem 0; padding: 0.75rem; background-color: #f8d7da; border: 1px solid #dc3545; border-radius: 4px;">
                                <strong>‚ùå Insufficient funds</strong>
                                <p style="margin: 0.5rem 0 0 0;">You need $@_totalValue.ToString("N2") but only have $@_availableBalance.ToString("N2")</p>
                            </div>
                        }
                        else if (_tradeType == TradeType.Sell && _quantity > _ownedShares)
                        {
                            <div class="alert alert-danger" style="margin: 1rem 0; padding: 0.75rem; background-color: #f8d7da; border: 1px solid #dc3545; border-radius: 4px;">
                                <strong>‚ùå Insufficient shares</strong>
                                <p style="margin: 0.5rem 0 0 0;">You're trying to sell @_quantity shares but only own @_ownedShares</p>
                            </div>
                        }
                    }

                    @* Debug info - remove after fixing *@
                    @if (!_canExecuteTrade)
                    {
                        <div style="color: red; font-size: 12px; margin-top: 10px;">
                            Debug: Cannot execute trade. Error: @_errorMessage
                        </div>
                    }
                </div>

                <!-- Modal Footer -->
                <div class="modal-footer">
                    <div class="confirmation-check">
                        <input type="checkbox" id="confirmTrade" @bind="_confirmTrade" 
                               disabled="@(!_isValidTrade)" />
                        <label for="confirmTrade">I confirm this order.</label>
                    </div>
                    <button class="execute-btn @(_tradeType.ToString().ToLower())"
                            @onclick="ExecuteTrade"
                            disabled="@(!_confirmTrade || !_isValidTrade || !_canExecuteTrade)">
                        @_tradeType.ToString() @_quantity Share@(_quantity != 1 ? "s" : "") for $@_totalValue.ToString("N2")
                    </button>
                </div>
            }
        </div>
    </div>
}


@code {
    private bool _isVisible = false;
    private Stock? _selectedStock;
    private TradeType _tradeType = TradeType.Buy;
    private int _quantity = 0;
    private decimal _totalValue = 0;
    private decimal _availableBalance = 0;
    private int _ownedShares = 0;
    private int _maxQuantity => _tradeType == TradeType.Buy 
        ? (int)Math.Floor(_availableBalance / (_selectedStock?.Price ?? 1))  // Max shares user can afford
        : _ownedShares;  // Max shares user owns
    private bool _confirmTrade = false;
    private bool _canExecuteTrade = false;
    private string? _errorMessage = null;

    // ‚úÖ NEW: Validation property to check if trade is valid
    private bool _isValidTrade => _quantity > 0 && 
        (_tradeType == TradeType.Buy 
            ? _totalValue <= _availableBalance 
            : _quantity <= _ownedShares);

    [Parameter] public EventCallback<TradeConfirmation> OnTradeExecuted { get; set; }

    public async Task OpenModal(Stock stock, TradeType tradeType)
    {
        Console.WriteLine($"üîç TRADING MODAL: Opening modal for {stock.Symbol} - {tradeType}");
        
        _selectedStock = stock;
        _tradeType = tradeType;
        _quantity = 0;
        _totalValue = 0;
        _confirmTrade = false;
        _canExecuteTrade = false;
        _errorMessage = null;
        _ownedShares = 0; // Reset owned shares

        // Get user's current balance and holdings
        await LoadUserBalance();

        _isVisible = true;
        StateHasChanged();
    }

    private async Task LoadUserBalance()
    {
        try
        {
            Console.WriteLine("üîç TRADING MODAL: Starting LoadUserBalance...");
            
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            Console.WriteLine($"üîç TRADING MODAL: Auth state retrieved. IsAuthenticated: {authState.User.Identity?.IsAuthenticated}");
            
            if (authState.User.Identity?.IsAuthenticated != true)
            {
                _errorMessage = "User not authenticated";
                Console.WriteLine("üîç TRADING MODAL: User is not authenticated");
                _canExecuteTrade = false;
                return;
            }

            var user = await UserService.GetCurrentUserAsync(authState.User);
            
            if (user == null)
            {
                _errorMessage = "User not found";
                Console.WriteLine("üîç TRADING MODAL: User is null after GetCurrentUserAsync");
                _availableBalance = 0;
                _ownedShares = 0;
                _canExecuteTrade = false;
                return;
            }

            Console.WriteLine($"üîç TRADING MODAL: User loaded: {user.Username}");
            Console.WriteLine($"üîç TRADING MODAL: Current balance: ${user.CurrentCashBalance:N2}");
            Console.WriteLine($"üîç TRADING MODAL: Starting balance: ${user.StartingCashBalance:N2}");
            Console.WriteLine($"üîç TRADING MODAL: Portfolio loaded: {user.Portfolio != null}");

            _availableBalance = user.CurrentCashBalance;

            // ‚úÖ ENHANCED: Always load owned shares for any stock (for display purposes)
            if (_selectedStock != null)
            {
                if (user.Portfolio?.Positions != null &&
                    user.Portfolio.Positions.TryGetValue(_selectedStock.Symbol, out var position))
                {
                    _ownedShares = position.TotalQuantity;
                    Console.WriteLine($"üîç TRADING MODAL: Owned shares for {_selectedStock.Symbol}: {_ownedShares}");
                }
                else
                {
                    _ownedShares = 0;
                    Console.WriteLine($"üîç TRADING MODAL: No position found for {_selectedStock.Symbol}");
                }
            }

            // ‚úÖ ENHANCED: Only allow trade execution if conditions are met
            if (_tradeType == TradeType.Sell && _ownedShares == 0)
            {
                _canExecuteTrade = false;
                _errorMessage = $"You don't own any shares of {_selectedStock?.Symbol}";
                Console.WriteLine($"üîç TRADING MODAL: Cannot sell - no shares owned");
            }
            else
            {
                _canExecuteTrade = true;
                Console.WriteLine($"üîç TRADING MODAL: LoadUserBalance completed successfully. Can execute: {_canExecuteTrade}");
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            Console.WriteLine($"üîç TRADING MODAL ERROR: {ex.Message}");
            Console.WriteLine($"üîç TRADING MODAL ERROR STACK: {ex.StackTrace}");
            _availableBalance = 0;
            _ownedShares = 0;
            _canExecuteTrade = false;
        }
    }

    private void CloseModal()
    {
        _isVisible = false;
        StateHasChanged();
    }

    private void CalculateTotalValue(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var qty) && _selectedStock != null && _selectedStock.Price > 0)
        {
            _quantity = qty;
            _totalValue = qty * _selectedStock.Price;
            
            Console.WriteLine($"üîç TRADING MODAL: Calculated - Quantity: {_quantity}, Total Value: ${_totalValue:N2}");
        }
        else
        {
            _quantity = 0;
            _totalValue = 0;
        }
        StateHasChanged();
    }

    private async Task ExecuteTrade()
    {
        if (_selectedStock == null || _quantity <= 0)
        {
            Console.WriteLine("üîç TRADING MODAL: Cannot execute - invalid stock or quantity");
            return;
        }

        // ‚úÖ ENHANCED: Additional validation before executing
        if (_tradeType == TradeType.Buy && _totalValue > _availableBalance)
        {
            Console.WriteLine($"üîç TRADING MODAL: Cannot execute BUY - insufficient funds. Need: ${_totalValue:N2}, Have: ${_availableBalance:N2}");
            _errorMessage = "Insufficient funds";
            return;
        }

        if (_tradeType == TradeType.Sell && _quantity > _ownedShares)
        {
            Console.WriteLine($"üîç TRADING MODAL: Cannot execute SELL - insufficient shares. Need: {_quantity}, Have: {_ownedShares}");
            _errorMessage = "Insufficient shares";
            return;
        }

        Console.WriteLine($"üîç TRADING MODAL: Executing trade - {_tradeType} {_quantity} shares of {_selectedStock.Symbol} at ${_selectedStock.Price:N2}");

        var confirmation = new TradeConfirmation
        {
            Stock = _selectedStock,
            TradeType = _tradeType,
            Shares = _quantity,
            PricePerShare = _selectedStock.Price,
            TotalAmount = _totalValue,
            Timestamp = DateTime.Now
        };

        await OnTradeExecuted.InvokeAsync(confirmation);
        CloseModal();
    }

    public enum TradeType
    {
        Buy,
        Sell
    }

    public class TradeConfirmation
    {
        public required Stock Stock { get; set; }
        public TradeType TradeType { get; set; }
        public decimal Shares { get; set; }
        public decimal PricePerShare { get; set; }
        public decimal TotalAmount { get; set; }
        public DateTime Timestamp { get; set; }
    }
}