@namespace TradingApp.Components
@using TradingApp.Models
@using Microsoft.JSInterop
@inject IJSRuntime JS

@if (_isVisible)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation="true">

            @if (_selectedStock != null)
            {
                <!-- Modal Header -->
                <div class="modal-header">
                    <div class="header-info">
                        <span class="trade-type-badge @(_tradeType.ToString().ToLower())">@_tradeType</span>
                        <h3 class="stock-symbol">@_selectedStock.Symbol</h3>
                        <p class="stock-name">@_selectedStock.Name</p>
                    </div>
                    <button class="close-button" @onclick="CloseModal" aria-label="Close modal">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                    </button>
                </div>

                <!-- Modal Body -->
                <div class="modal-body">
                    <div class="price-details">
                        <div class="detail-item">
                            <span class="label">Market Price</span>
                            <span class="value">$@_selectedStock.Price.ToString("N2")</span>
                        </div>
                        <div class="detail-item text-right">
                            <span class="label">24h Change</span>
                            <span class="value @(_selectedStock.Change >= 0 ? "up" : "down")">
                                @(_selectedStock.Change >= 0 ? "+" : "")@_selectedStock.Change.ToString("N2") (@_selectedStock.ChangePercent.ToString("N2")%)
                            </span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="investmentAmount">Amount</label>
                        <div class="input-wrapper">
                            <span class="adornment">$</span>
                            <input id="investmentAmount" type="number" class="form-control"
                                   @bind="_investmentAmount" @oninput="CalculateShares"
                                   placeholder="0.00" step="0.01" min="0" max="@_maxInvestment" />
                        </div>
                    </div>

                    <div class="summary-row">
                        <div class="summary-item">
                            <span class="label">Shares</span>
                            <span class="value">â‰ˆ @_calculatedShares.ToString("N4")</span>
                        </div>
                        <div class="summary-item">
                            <span class="label">Available</span>
                            <span class="value">$@_availableBalance.ToString("N2")</span>
                        </div>
                    </div>
                </div>

                <!-- Modal Footer -->
                <div class="modal-footer">
                    <div class="confirmation-check">
                        <input type="checkbox" id="confirmTrade" @bind="_confirmTrade" />
                        <label for="confirmTrade">I confirm this order.</label>
                    </div>
                    <button class="execute-btn @(_tradeType.ToString().ToLower())"
                            @onclick="ExecuteTrade"
                            disabled="@(!_confirmTrade || _investmentAmount <= 0)">
                        @_tradeType.ToString() Stock
                    </button>
                </div>
            }
        </div>
    </div>
}


@code {
    private bool _isVisible = false;
    private Stock? _selectedStock;
    private TradeType _tradeType = TradeType.Buy;
    private decimal _investmentAmount = 0;
    private decimal _calculatedShares = 0;
    private decimal _estimatedTotal = 0;
    private decimal _availableBalance = 10000; // Mock balance
    private decimal _maxInvestment => _tradeType == TradeType.Buy ? _availableBalance : 999999;
    private bool _confirmTrade = false;

    [Parameter] public EventCallback<TradeConfirmation> OnTradeExecuted { get; set; }

    public void OpenModal(Stock stock, TradeType tradeType)
    {
        _selectedStock = stock;
        _tradeType = tradeType;
        _investmentAmount = 0;
        _calculatedShares = 0;
        _estimatedTotal = 0;
        _confirmTrade = false;
        _isVisible = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        _isVisible = false;
        StateHasChanged();
    }

    private void CalculateShares(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value?.ToString(), out var amount) && _selectedStock != null && _selectedStock.Price > 0)
        {
            _investmentAmount = amount;
            _calculatedShares = amount / _selectedStock.Price;
            _estimatedTotal = _calculatedShares * _selectedStock.Price;
        }
        else
        {
            _calculatedShares = 0;
            _estimatedTotal = 0;
        }
        StateHasChanged();
    }

    private async Task ExecuteTrade()
    {
        if (_selectedStock == null || _calculatedShares <= 0) return;

        var confirmation = new TradeConfirmation
        {
            Stock = _selectedStock,
            TradeType = _tradeType,
            Shares = _calculatedShares,
            PricePerShare = _selectedStock.Price,
            TotalAmount = _estimatedTotal,
            Timestamp = DateTime.Now
        };

        await OnTradeExecuted.InvokeAsync(confirmation);
        CloseModal();
    }

    public enum TradeType
    {
        Buy,
        Sell
    }

    public class TradeConfirmation
    {
        public required Stock Stock { get; set; }
        public TradeType TradeType { get; set; }
        public decimal Shares { get; set; }
        public decimal PricePerShare { get; set; }
        public decimal TotalAmount { get; set; }
        public DateTime Timestamp { get; set; }
    }
}